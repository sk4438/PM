// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_MeasValue_PR uint32

type _Ctype_OCTET_STRING_t = _Ctype_struct_OCTET_STRING

type _Ctype_SubCounterIndexType_PR uint32

type _Ctype_SubCounterIndexType_t = _Ctype_struct_SubCounterIndexType

type _Ctype_VisibleString_t = _Ctype_struct_OCTET_STRING

type _Ctype___ssize_t = _Ctype_long

type _Ctype___uint8_t = _Ctype_uchar

type _Ctype_asn_struct_ctx_t = _Ctype_struct_asn_struct_ctx_s

type _Ctype_ber_tlv_len_t = _Ctype_ssize_t

type _Ctype_int int32

type _Ctype_long int64

type _Ctype_short int16

type _Ctype_ssize_t = _Ctype___ssize_t

type _Ctype_struct_MeasValue struct {
	present		_Ctype_MeasValue_PR
	_		[4]byte
	choice		[40]byte
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct_OCTET_STRING struct {
	buf		*_Ctype_uint8_t
	size		_Ctype_int
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct_PDSU struct {
	streamId			_Ctype_long
	standardizedMeasResults		_Ctype_struct_standardizedMeasResults
	vendorSpecificMeasResults	*_Ctype_struct_vendorSpecificMeasResults
	_asn_ctx			_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct_PDSUs struct {
	list		_Ctype_struct___0
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct_SubCounterIndexType struct {
	present		_Ctype_SubCounterIndexType_PR
	_		[4]byte
	choice		[104]byte
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct___0 struct {
	array	**_Ctype_struct_PDSU
	count	_Ctype_int
	size	_Ctype_int
	free	*[0]byte
}

type _Ctype_struct___1 struct {
	array	**_Ctype_struct_MeasValue
	count	_Ctype_int
	size	_Ctype_int
	free	*[0]byte
}

type _Ctype_struct_asn_struct_ctx_s struct {
	phase	_Ctype_short
	step	_Ctype_short
	context	_Ctype_int
	ptr	unsafe.Pointer
	left	_Ctype_ber_tlv_len_t
}

type _Ctype_struct_standardizedMeasResults struct {
	list		_Ctype_struct___1
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_struct_vendorSpecificMeasResults struct {
	list		_Ctype_struct___1
	_asn_ctx	_Ctype_struct_asn_struct_ctx_s
}

type _Ctype_uchar uint8

type _Ctype_uint8_t = _Ctype___uint8_t

type _Ctype_union_MeasValue_u = [40]byte

type _Ctype_union_SubCounterIndexType_u = [104]byte

//go:notinheap
type _Ctype_void_notinheap struct{}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_c8e6a7261cd2_Cfunc_decode
//go:linkname __cgofn__cgo_c8e6a7261cd2_Cfunc_decode _cgo_c8e6a7261cd2_Cfunc_decode
var __cgofn__cgo_c8e6a7261cd2_Cfunc_decode byte
var _cgo_c8e6a7261cd2_Cfunc_decode = unsafe.Pointer(&__cgofn__cgo_c8e6a7261cd2_Cfunc_decode)

//go:cgo_unsafe_args
func _Cfunc_decode(p0 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_c8e6a7261cd2_Cfunc_decode, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
