// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/karthik/proj/client/client.go:1:1
package main

/*
#cgo CFLAGS: -g
#cgo LDFLAGS: -L . -lasn
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include "PDSUs.h"
#include "PDSU.h"
#include "MeasValue.h"
#include "SubCounterIndexType.h"
#include "SubCounterListType.h"
#include <time.h>
#include <assert.h>
#include <stdbool.h>
#include <time.h>
#include <unistd.h>

void decode(int i)
{
    const char *filename = i==1?"decode1":"decode";
    PDSUs_t *pdsud;
    pdsud = calloc(1,sizeof(PDSUs_t));
    char buf[1024000];
    FILE *fp = fopen(filename,"r");
    size_t size = fread(buf,1,sizeof(buf),fp);
    fclose(fp);
    fprintf(stderr, "size - %lu\n" ,size);
    asn_dec_rval_t ret1 = uper_decode(0,&asn_DEF_PDSUs,(void **)&pdsud,buf,size,0,0);
    if(ret1.code==RC_WMORE)
    {
        assert(1==0);
    }else if(ret1.code==RC_FAIL)
    {
        assert(1==2);
    }
    asn_fprint(stderr,&asn_DEF_PDSU,pdsud->list.array[0]);
}
*/
import _ "unsafe"

import (
	"fmt"
	"log"
	"os"

	"github.com/gorilla/websocket"
)

type PDSUs struct {
	pdsus  /*line :52:8*/_Ctype_struct_PDSUs /*line :52:22*/
}

var filenam = [2]string{"/home/karthik/proj/client/decode", "/home/karthik/proj/client/decode1"}

func main() {
	fmt.Println("I am running")
	conn, _, err := websocket.DefaultDialer.Dial("ws://127.0.0.1:8080/stream", nil)
	if err != nil {
		log.Fatal("Unable to connect %s", err.Error())
	}
	var i = 1
	var fp *os.File
	for {
		_, p, err := conn.ReadMessage()
		if err != nil {
			fmt.Println("Unable to Recive Message : ", err.Error())
			return
		}
		if string(p) == "Start" {
			i = 1 - i
			fp, err = os.OpenFile(filenam[i], os.O_CREATE|os.O_WRONLY, 0644)
			_, p, err := conn.ReadMessage()
			_, err = fp.Write(p)
			if err != nil {
				fmt.Println("Unable to write to the file : ", err.Error())
				return
			}
			fmt.Println("a Stream is finished and decoding start", i)
			( /*line :81:4*/_Cfunc_decode /*line :81:11*/)( /*line :81:13*/_Ctype_int /*line :81:18*/(i))
		}
	}
	defer func() {
		conn.Close()
	}()
}
